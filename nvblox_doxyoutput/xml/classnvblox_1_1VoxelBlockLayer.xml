<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classnvblox_1_1VoxelBlockLayer" kind="class" language="C++" prot="public">
    <compoundname>nvblox::VoxelBlockLayer</compoundname>
    <basecompoundref refid="classnvblox_1_1BlockLayer" prot="public" virt="non-virtual">nvblox::BlockLayer&lt; VoxelBlock&lt; VoxelType &gt; &gt;</basecompoundref>
    <includes refid="layer_8h" local="no">layer.h</includes>
    <templateparamlist>
      <param>
        <type>typename VoxelType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnvblox_1_1VoxelBlockLayer_1a5850e1c597ad2d444c17cfb186d0b2ac" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;VoxelBlockLayer&gt; nvblox::VoxelBlockLayer&lt; VoxelType &gt;::Ptr</definition>
        <argsstring></argsstring>
        <name>Ptr</name>
        <qualifiedname>nvblox::VoxelBlockLayer::Ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="139" column="27" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnvblox_1_1VoxelBlockLayer_1a966b8adc9d0149809a54fd83a77462bb" prot="public" static="no">
        <type>std::shared_ptr&lt; const <ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;const VoxelBlockLayer&gt; nvblox::VoxelBlockLayer&lt; VoxelType &gt;::ConstPtr</definition>
        <argsstring></argsstring>
        <name>ConstPtr</name>
        <qualifiedname>nvblox::VoxelBlockLayer::ConstPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="140" column="27" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnvblox_1_1VoxelBlockLayer_1a08cf2b8543c999a8d8ce284fc6138b90" prot="public" static="no">
        <type><ref refid="classnvblox_1_1BlockLayer" kindref="compound">BlockLayer</ref>&lt; <ref refid="structnvblox_1_1VoxelBlock" kindref="compound">VoxelBlock</ref>&lt; VoxelType &gt; &gt;</type>
        <definition>using nvblox::VoxelBlockLayer&lt; VoxelType &gt;::Base =  BlockLayer&lt;VoxelBlock&lt;VoxelType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>nvblox::VoxelBlockLayer::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="142" column="3" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnvblox_1_1VoxelBlockLayer_1ae71c3d2a9f95ab362ed207e37bebbd65" prot="public" static="no">
        <type><ref refid="structnvblox_1_1VoxelBlock" kindref="compound">VoxelBlock</ref>&lt; VoxelType &gt;</type>
        <definition>using nvblox::VoxelBlockLayer&lt; VoxelType &gt;::VoxelBlockType =  VoxelBlock&lt;VoxelType&gt;</definition>
        <argsstring></argsstring>
        <name>VoxelBlockType</name>
        <qualifiedname>nvblox::VoxelBlockLayer::VoxelBlockType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="144" column="3" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnvblox_1_1VoxelBlockLayer_1a87f2e1b80a09d39ca298f7ec9c8f4377" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float nvblox::VoxelBlockLayer&lt; VoxelType &gt;::voxel_size_</definition>
        <argsstring></argsstring>
        <name>voxel_size_</name>
        <qualifiedname>nvblox::VoxelBlockLayer::voxel_size_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="206" column="9" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a7c0b5021b2086f48e99ab9271084b35e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nvblox::VoxelBlockLayer&lt; VoxelType &gt;::VoxelBlockLayer</definition>
        <argsstring>(float voxel_size, MemoryType memory_type)</argsstring>
        <name>VoxelBlockLayer</name>
        <qualifiedname>nvblox::VoxelBlockLayer::VoxelBlockLayer</qualifiedname>
        <param>
          <type>float</type>
          <declname>voxel_size</declname>
        </param>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voxel_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of each voxel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_type</parametername>
</parameternamelist>
<parameterdescription>
<para>In which type of memory the blocks in this layer should be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="150" column="3" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a891723fb1fb83c19e5636c84f249d66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::VoxelBlockLayer&lt; VoxelType &gt;::VoxelBlockLayer</definition>
        <argsstring>()=delete</argsstring>
        <name>VoxelBlockLayer</name>
        <qualifiedname>nvblox::VoxelBlockLayer::VoxelBlockLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="154" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a82d735f6217104ad092b70bd8d7edcda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual nvblox::VoxelBlockLayer&lt; VoxelType &gt;::~VoxelBlockLayer</definition>
        <argsstring>()</argsstring>
        <name>~VoxelBlockLayer</name>
        <qualifiedname>nvblox::VoxelBlockLayer::~VoxelBlockLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="155" column="11" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1ae6349e71ccb78b817b4d5c3286c9a222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::VoxelBlockLayer&lt; VoxelType &gt;::VoxelBlockLayer</definition>
        <argsstring>(const VoxelBlockLayer &amp;other)</argsstring>
        <name>VoxelBlockLayer</name>
        <qualifiedname>nvblox::VoxelBlockLayer::VoxelBlockLayer</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Deep copies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="158" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1adbb7cd80dd59a44b2a5328b3ebc4be07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::VoxelBlockLayer&lt; VoxelType &gt;::VoxelBlockLayer</definition>
        <argsstring>(const VoxelBlockLayer &amp;other, MemoryType memory_type)</argsstring>
        <name>VoxelBlockLayer</name>
        <qualifiedname>nvblox::VoxelBlockLayer::VoxelBlockLayer</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="159" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a5074f737e4296c07fd9ff50c9a63d7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;</type>
        <definition>VoxelBlockLayer &amp; nvblox::VoxelBlockLayer&lt; VoxelType &gt;::operator=</definition>
        <argsstring>(const VoxelBlockLayer &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>nvblox::VoxelBlockLayer::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment retains the current layer&apos;s memory type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="161" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a0a4b31d87ada9e766cba07c980a82fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::VoxelBlockLayer&lt; VoxelType &gt;::VoxelBlockLayer</definition>
        <argsstring>(VoxelBlockLayer &amp;&amp;other)=default</argsstring>
        <name>VoxelBlockLayer</name>
        <qualifiedname>nvblox::VoxelBlockLayer::VoxelBlockLayer</qualifiedname>
        <param>
          <type><ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="164" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1acb090c8e51d393267ad32ec95726baed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;</type>
        <definition>VoxelBlockLayer &amp; nvblox::VoxelBlockLayer&lt; VoxelType &gt;::operator=</definition>
        <argsstring>(VoxelBlockLayer &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>nvblox::VoxelBlockLayer::operator=</qualifiedname>
        <param>
          <type><ref refid="classnvblox_1_1VoxelBlockLayer" kindref="compound">VoxelBlockLayer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="165" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a8fb182c9dea4cfb571169f84e6551d85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvblox::VoxelBlockLayer&lt; VoxelType &gt;::getVoxels</definition>
        <argsstring>(const std::vector&lt; Vector3f &gt; &amp;positions_L, std::vector&lt; VoxelType &gt; *voxels_ptr, std::vector&lt; bool &gt; *success_flags_ptr) const</argsstring>
        <name>getVoxels</name>
        <qualifiedname>nvblox::VoxelBlockLayer::getVoxels</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenvblox_1a4b87a147b3363eaf7442ed521d3a9968" kindref="member">Vector3f</ref> &gt; &amp;</type>
          <declname>positions_L</declname>
        </param>
        <param>
          <type>std::vector&lt; VoxelType &gt; *</type>
          <declname>voxels_ptr</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; *</type>
          <declname>success_flags_ptr</declname>
        </param>
        <briefdescription>
<para>Gets voxels by copy from a list of positions. </para>
        </briefdescription>
        <detaileddescription>
<para>The positions are given with respect to the layer frame (L). The function returns the closest voxels to the passed points. If memory_type_ == kDevice, the function retrieves voxel data from the GPU and transfers it to the CPU. Modifications to the returned voxel data do not affect the layer (they&apos;re copies). Note that this function performs a Cudamemcpy per voxel. So it will likely be relatively slow. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions_L</parametername>
</parameternamelist>
<parameterdescription>
<para>query positions in layer frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voxels_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a vector of voxels where we&apos;ll store the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>success_flags_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a vector of flags indicating if we were able to retrive each voxel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="180" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a0a307657f53a5ebf8e7b16b532f22a20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvblox::VoxelBlockLayer&lt; VoxelType &gt;::getVoxelsGPU</definition>
        <argsstring>(const device_vector&lt; Vector3f &gt; &amp;positions_L, device_vector&lt; VoxelType &gt; *voxels_ptr, device_vector&lt; bool &gt; *success_flags_ptr) const</argsstring>
        <name>getVoxelsGPU</name>
        <qualifiedname>nvblox::VoxelBlockLayer::getVoxelsGPU</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1device__vector" kindref="compound">device_vector</ref>&lt; <ref refid="namespacenvblox_1a4b87a147b3363eaf7442ed521d3a9968" kindref="member">Vector3f</ref> &gt; &amp;</type>
          <declname>positions_L</declname>
        </param>
        <param>
          <type><ref refid="classnvblox_1_1device__vector" kindref="compound">device_vector</ref>&lt; VoxelType &gt; *</type>
          <declname>voxels_ptr</declname>
        </param>
        <param>
          <type><ref refid="classnvblox_1_1device__vector" kindref="compound">device_vector</ref>&lt; bool &gt; *</type>
          <declname>success_flags_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="184" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a99af58ec96fa5bc8436fa51c153f16e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; VoxelType, bool &gt;</type>
        <definition>std::pair&lt; VoxelType, bool &gt; nvblox::VoxelBlockLayer&lt; VoxelType &gt;::getVoxel</definition>
        <argsstring>(const Vector3f &amp;p_L) const</argsstring>
        <name>getVoxel</name>
        <qualifiedname>nvblox::VoxelBlockLayer::getVoxel</qualifiedname>
        <param>
          <type>const <ref refid="namespacenvblox_1a4b87a147b3363eaf7442ed521d3a9968" kindref="member">Vector3f</ref> &amp;</type>
          <declname>p_L</declname>
        </param>
        <briefdescription>
<para>Get a voxel by copy by (closest) position The position is given with respect to the layer frame (L). </para>
        </briefdescription>
        <detaileddescription>
<para>The function returns the closest voxels to the passed points. If memory_type_ == kDevice, the function retrieves voxel data from the GPU and transfers it to the CPU. Modifications to the returned voxel data do not affect the layer (they&apos;re copies). Note that this function performs a Cudamemcpy for the voxel. So it&apos;s slow. This function is intended for testing/convenience and shouldn&apos;t be used in performance critical code. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_L</parametername>
</parameternamelist>
<parameterdescription>
<para>query position in layer frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair containing the voxel copy and a flag indicating if the voxel could be retrieved (ie if the voxel was allocated in the layer). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="200" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1VoxelBlockLayer_1a23bf977938c825cb4f2e7321b738fb49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float nvblox::VoxelBlockLayer&lt; VoxelType &gt;::voxel_size</definition>
        <argsstring>() const</argsstring>
        <name>voxel_size</name>
        <qualifiedname>nvblox::VoxelBlockLayer::voxel_size</qualifiedname>
        <briefdescription>
<para>Returns the size of the voxels in this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="203" column="9" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="203" bodyend="203"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Specialization for <ref refid="classnvblox_1_1BlockLayer" kindref="compound">BlockLayer</ref> that exclusively contains VoxelBlocks to make access easier. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nvblox::BlockLayer&lt; VoxelBlock&lt; VoxelType &gt; &gt;</label>
        <link refid="classnvblox_1_1BlockLayer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nvblox::BaseLayer</label>
        <link refid="classnvblox_1_1BaseLayer"/>
      </node>
      <node id="1">
        <label>nvblox::VoxelBlockLayer&lt; VoxelType &gt;</label>
        <link refid="classnvblox_1_1VoxelBlockLayer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nvblox::BlockLayer&lt; VoxelBlock&lt; VoxelType &gt; &gt;</label>
        <link refid="classnvblox_1_1BlockLayer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>blocks_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nvblox::Index3DHashMapType&lt; typenameBlockType::Ptr &gt;</label>
        <link refid="structnvblox_1_1Index3DHashMapType"/>
      </node>
      <node id="3">
        <label>nvblox::BaseLayer</label>
        <link refid="classnvblox_1_1BaseLayer"/>
      </node>
      <node id="1">
        <label>nvblox::VoxelBlockLayer&lt; VoxelType &gt;</label>
        <link refid="classnvblox_1_1VoxelBlockLayer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" line="137" column="1" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/map/layer.h" bodystart="137" bodyend="207"/>
    <listofallmembers>
      <member refid="classnvblox_1_1BlockLayer_1a0690b85b1f3ffe5f3f68cba6473a29e4" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>allocateBlockAtIndex</name></member>
      <member refid="classnvblox_1_1BlockLayer_1ae5a0027567ddba3f16b349ef0919101c" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>allocateBlockAtPosition</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a08cf2b8543c999a8d8ce284fc6138b90" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>Base</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a5fedc345c43cc27f4c0dcbf7a17a4992" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>block_size</name></member>
      <member refid="classnvblox_1_1BlockLayer_1afdf887edd08f42da949ea3ff09fc6521" prot="protected" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>block_size_</name></member>
      <member refid="classnvblox_1_1BlockLayer_1aa70fdd80865f95284da96e9c885ed465" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockHash</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a920f3bedcc7a6a79c6f7a25562e31a7d" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a29abd83311c596ed013d9011e7944817" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a665f518399a1c366be84a78e9cd694f5" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1ad72da12539f7c2391bcd4f06bc1db545" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a75166389b6c380e595930f975eac62b5" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1afb0b32224f368a98b17057c196501dd7" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a5813d390fa87d1776ad78afcd1829e73" prot="protected" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>blocks_</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a4b25d4f82f7dac1a1d23e13088b3a5c1" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>BlockType</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a4802b57f134d73560e45d580aaa0c6a5" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>clear</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a7b8c8f30bdb1ba6530c1414755805214" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>clearBlock</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a4ac3bcb889db1ebdc009fab6eed4c9a5" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>clearBlocks</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a966b8adc9d0149809a54fd83a77462bb" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>ConstPtr</name></member>
      <member refid="classnvblox_1_1BlockLayer_1ac246abd9fe341b2b6f933d8be88f6d3a" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getAllBlockIndices</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a3fc3c95cfc4bccee4fb9b80fdfadf5b1" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getAllBlockPointers</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a4da5e5b6ed0212d2776eb2938f3d076b" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getBlockAtIndex</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a099031ff9a1728843b680feb420fd90c" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getBlockAtIndex</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a811bce823aa8ad903b679b5ecd362223" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getBlockAtPosition</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a6818ba255ec3991aaffc52e1e577805f" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getBlockAtPosition</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a0b354287afc7fd211e70590a7e2da378" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getGpuLayerView</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a99af58ec96fa5bc8436fa51c153f16e9" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getVoxel</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a8fb182c9dea4cfb571169f84e6551d85" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getVoxels</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a0a307657f53a5ebf8e7b16b532f22a20" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>getVoxelsGPU</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a0079d43d3aff9f34de34b7de4339bda6" prot="protected" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>gpu_layer_view_</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a641f794a170b8a426d025d7c584d2d85" prot="protected" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>gpu_layer_view_up_to_date_</name></member>
      <member refid="classnvblox_1_1BlockLayer_1af6dda24ad81fba9c5a9413ba9a3b3a07" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>GPULayerViewType</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a6bc60fa0c3557d4e53bf019f216d1004" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>isBlockAllocated</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a8cf054a81f1ba64f5e019e182a807caa" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>LayerType</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a8b7cf35aa658d40da629226562cb796f" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>memory_type</name></member>
      <member refid="classnvblox_1_1BlockLayer_1aeadbc261ee6b0b47d9475862462dce9d" prot="protected" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>memory_type_</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a577ce86554097b58eb61d9aa9a9f17f9" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>numAllocatedBlocks</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a5074f737e4296c07fd9ff50c9a63d7a3" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1acb090c8e51d393267ad32ec95726baed" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a3f5bcc21cea94d88740704cc937ba644" prot="public" virt="non-virtual" ambiguityscope="BlockLayer&lt; VoxelBlock&lt; VoxelType &gt; &gt;::"><scope>nvblox::VoxelBlockLayer</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1BlockLayer_1ab5ef23fa0273726bf6d53280d26fb88c" prot="public" virt="non-virtual" ambiguityscope="BlockLayer&lt; VoxelBlock&lt; VoxelType &gt; &gt;::"><scope>nvblox::VoxelBlockLayer</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a5850e1c597ad2d444c17cfb186d0b2ac" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>Ptr</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a23bf977938c825cb4f2e7321b738fb49" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>voxel_size</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a87f2e1b80a09d39ca298f7ec9c8f4377" prot="private" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>voxel_size_</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a7c0b5021b2086f48e99ab9271084b35e" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>VoxelBlockLayer</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a891723fb1fb83c19e5636c84f249d66f" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>VoxelBlockLayer</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1ae6349e71ccb78b817b4d5c3286c9a222" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>VoxelBlockLayer</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1adbb7cd80dd59a44b2a5328b3ebc4be07" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>VoxelBlockLayer</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a0a4b31d87ada9e766cba07c980a82fe8" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>VoxelBlockLayer</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1ae71c3d2a9f95ab362ed207e37bebbd65" prot="public" virt="non-virtual"><scope>nvblox::VoxelBlockLayer</scope><name>VoxelBlockType</name></member>
      <member refid="classnvblox_1_1BaseLayer_1afb25011eb3e08946109e60532377e206" prot="public" virt="virtual"><scope>nvblox::VoxelBlockLayer</scope><name>~BaseLayer</name></member>
      <member refid="classnvblox_1_1BlockLayer_1a7b6526290f7e2ff7be7a449036e2e12a" prot="public" virt="virtual"><scope>nvblox::VoxelBlockLayer</scope><name>~BlockLayer</name></member>
      <member refid="classnvblox_1_1VoxelBlockLayer_1a82d735f6217104ad092b70bd8d7edcda" prot="public" virt="virtual"><scope>nvblox::VoxelBlockLayer</scope><name>~VoxelBlockLayer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
