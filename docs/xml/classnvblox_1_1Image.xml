<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classnvblox_1_1Image" kind="class" language="C++" prot="public">
    <compoundname>nvblox::Image</compoundname>
    <basecompoundref refid="classnvblox_1_1ImageBase" prot="public" virt="non-virtual">nvblox::ImageBase&lt; _ElementType &gt;</basecompoundref>
    <includes refid="image_8h" local="no">image.h</includes>
    <templateparamlist>
      <param>
        <type>typename _ElementType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnvblox_1_1Image_1ac9716902b1ff930f5bcd0728762e7bae" prot="public" static="no">
        <type>_ElementType</type>
        <definition>typedef _ElementType nvblox::Image&lt; _ElementType &gt;::ElementType</definition>
        <argsstring></argsstring>
        <name>ElementType</name>
        <qualifiedname>nvblox::Image::ElementType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="122" column="24" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnvblox_1_1Image_1a1df37582c3ebe26891ecb0a293f7d4e9" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
        <definition>MemoryType nvblox::Image&lt; _ElementType &gt;::memory_type_</definition>
        <argsstring></argsstring>
        <name>memory_type_</name>
        <qualifiedname>nvblox::Image::memory_type_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="165" column="14" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnvblox_1_1Image_1a3e93a41a8e358094dcc13cd7639213b1" prot="protected" static="no" mutable="no">
        <type><ref refid="classnvblox_1_1unified__ptr" kindref="compound">unified_ptr</ref>&lt; <ref refid="classnvblox_1_1Image_1ac9716902b1ff930f5bcd0728762e7bae" kindref="member">ElementType</ref>[]&gt;</type>
        <definition>unified_ptr&lt;ElementType[]&gt; nvblox::Image&lt; _ElementType &gt;::owned_data_</definition>
        <argsstring></argsstring>
        <name>owned_data_</name>
        <qualifiedname>nvblox::Image::owned_data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="166" column="15" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnvblox_1_1Image_1a081fa7ddca3ed53b741836c8f4d44ef7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nvblox::Image&lt; _ElementType &gt;::Image</definition>
        <argsstring>(MemoryType memory_type=kDefaultImageMemoryType)</argsstring>
        <name>Image</name>
        <qualifiedname>nvblox::Image::Image</qualifiedname>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
          <defval><ref refid="namespacenvblox_1ab715cffa6ff1964ebcd0a536fd2f2fd1" kindref="member">kDefaultImageMemoryType</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="124" column="12" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" bodystart="124" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1a1cde2b3aa3ab942b9c6b2f581f5db4ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::Image&lt; _ElementType &gt;::Image</definition>
        <argsstring>(int rows, int cols, MemoryType memory_type=kDefaultImageMemoryType)</argsstring>
        <name>Image</name>
        <qualifiedname>nvblox::Image::Image</qualifiedname>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
          <defval><ref refid="namespacenvblox_1ab715cffa6ff1964ebcd0a536fd2f2fd1" kindref="member">kDefaultImageMemoryType</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="127" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1ae32fd075b12733a66b4ac7b8107cee9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual nvblox::Image&lt; _ElementType &gt;::~Image</definition>
        <argsstring>()=default</argsstring>
        <name>~Image</name>
        <qualifiedname>nvblox::Image::~Image</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="129" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1a1a7f93db4bad987ba4dfc231b6cb2e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::Image&lt; _ElementType &gt;::Image</definition>
        <argsstring>(Image &amp;&amp;other)</argsstring>
        <name>Image</name>
        <qualifiedname>nvblox::Image::Image</qualifiedname>
        <param>
          <type><ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor and assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="132" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1a7ac66302cc974845edca81b4b36528de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;</type>
        <definition>Image &amp; nvblox::Image&lt; _ElementType &gt;::operator=</definition>
        <argsstring>(Image &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>nvblox::Image::operator=</qualifiedname>
        <param>
          <type><ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="133" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1a7cb596f9e0eae36c73e9f9c08f12dee3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::Image&lt; _ElementType &gt;::Image</definition>
        <argsstring>(const Image &amp;other)</argsstring>
        <name>Image</name>
        <qualifiedname>nvblox::Image::Image</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Deep copy constructor (second can be used to transition memory type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="136" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1aad5373aacf2d3f39f9951942704d3557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nvblox::Image&lt; _ElementType &gt;::Image</definition>
        <argsstring>(const Image &amp;other, MemoryType memory_type)</argsstring>
        <name>Image</name>
        <qualifiedname>nvblox::Image::Image</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="137" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1a50c1877f0d1fb7cf4f983aa517ffb4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;</type>
        <definition>Image &amp; nvblox::Image&lt; _ElementType &gt;::operator=</definition>
        <argsstring>(const Image &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>nvblox::Image::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classnvblox_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="138" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1ab42d46cb8dd9f1475111f1ee8e32fb85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
        <definition>MemoryType nvblox::Image&lt; _ElementType &gt;::memory_type</definition>
        <argsstring>() const</argsstring>
        <name>memory_type</name>
        <qualifiedname>nvblox::Image::memory_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="141" column="21" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1a479f4eee0027e4954f9e9542d6b85301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvblox::Image&lt; _ElementType &gt;::setZero</definition>
        <argsstring>()</argsstring>
        <name>setZero</name>
        <qualifiedname>nvblox::Image::setZero</qualifiedname>
        <briefdescription>
<para>Set the image to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="144" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnvblox_1_1Image_1ad1c8c9ca974bbb73d01dfb5cfab326f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvblox::Image&lt; _ElementType &gt;::populateFromBuffer</definition>
        <argsstring>(int rows, int cols, const ElementType *buffer, MemoryType memory_type=kDefaultImageMemoryType)</argsstring>
        <name>populateFromBuffer</name>
        <qualifiedname>nvblox::Image::populateFromBuffer</qualifiedname>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const <ref refid="classnvblox_1_1Image_1ac9716902b1ff930f5bcd0728762e7bae" kindref="member">ElementType</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
          <defval><ref refid="namespacenvblox_1ab715cffa6ff1964ebcd0a536fd2f2fd1" kindref="member">kDefaultImageMemoryType</ref></defval>
        </param>
        <briefdescription>
<para>Reset the contents of the image. </para>
        </briefdescription>
        <detaileddescription>
<para>Reallocate if the image got larger. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the new image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colsNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>of columns in the new image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a memory buffer containing pixel data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the newly allocated image should reside. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="151" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnvblox_1_1Image_1a374ecbf25da4fd718ba8f876bd728e85" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnvblox_1_1Image" kindref="compound">Image</ref></type>
        <definition>static Image nvblox::Image&lt; _ElementType &gt;::fromBuffer</definition>
        <argsstring>(int rows, int cols, const ElementType *buffer, MemoryType memory_type=kDefaultImageMemoryType)</argsstring>
        <name>fromBuffer</name>
        <qualifiedname>nvblox::Image::fromBuffer</qualifiedname>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const <ref refid="classnvblox_1_1Image_1ac9716902b1ff930f5bcd0728762e7bae" kindref="member">ElementType</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="namespacenvblox_1adb582c0d90a20d74dff447c0ac393223" kindref="member">MemoryType</ref></type>
          <declname>memory_type</declname>
          <defval><ref refid="namespacenvblox_1ab715cffa6ff1964ebcd0a536fd2f2fd1" kindref="member">kDefaultImageMemoryType</ref></defval>
        </param>
        <briefdescription>
<para>Allocates a new image and populates it. </para>
        </briefdescription>
        <detaileddescription>
<para>Always allocates. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the new image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the new image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a memory buffer containing pixel data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the newly allocated image should reside. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="160" column="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Row-major image. </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>Note that in a row-major image, rows follow one another in linear memory, which means the column index varied between subsequent elements.</para>
</listitem><listitem><para>Images use corner based indexing such that the pixel with index (0,0) is centered at (0.5px,0.5px) and spans (0.0px,0.0px) to (1.0px,1.0px).</para>
</listitem><listitem><para>Points on the image plane are defined as: u_px = (u_px.x(), u_px.y()) = (col_idx, row_idx) in pixels. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nvblox::Image&lt; _ElementType &gt;</label>
        <link refid="classnvblox_1_1Image"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nvblox::ImageBase&lt; _ElementType &gt;</label>
        <link refid="classnvblox_1_1ImageBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nvblox::Image&lt; _ElementType &gt;</label>
        <link refid="classnvblox_1_1Image"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>owned_data_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nvblox::ImageBase&lt; _ElementType &gt;</label>
        <link refid="classnvblox_1_1ImageBase"/>
      </node>
      <node id="3">
        <label>nvblox::unified_ptr&lt; ElementType[]&gt;</label>
        <link refid="classnvblox_1_1unified__ptr"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" line="119" column="1" bodyfile="C:/Users/M502228/Downloads/nvblox-public/nvblox-public/nvblox/include/nvblox/sensors/image.h" bodystart="119" bodyend="167"/>
    <listofallmembers>
      <member refid="classnvblox_1_1ImageBase_1ac98eaa783ee38e39574bd75942ca80ed" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>cols</name></member>
      <member refid="classnvblox_1_1ImageBase_1ad7b25a9aae122bcfb76b10ffa6673701" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>cols_</name></member>
      <member refid="classnvblox_1_1ImageBase_1a8ac01f53420e26a45a24e01d5c9f67c4" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>data_</name></member>
      <member refid="classnvblox_1_1ImageBase_1a535d9177d9a0eeb3df283676206f011c" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>dataConstPtr</name></member>
      <member refid="classnvblox_1_1ImageBase_1af18aec811c976ef51a3d91e791cf3a5e" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>dataPtr</name></member>
      <member refid="classnvblox_1_1Image_1ac9716902b1ff930f5bcd0728762e7bae" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>ElementType</name></member>
      <member refid="classnvblox_1_1Image_1a374ecbf25da4fd718ba8f876bd728e85" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>fromBuffer</name></member>
      <member refid="classnvblox_1_1ImageBase_1a63357bf56903529282f781514bc162fc" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>height</name></member>
      <member refid="classnvblox_1_1Image_1a081fa7ddca3ed53b741836c8f4d44ef7" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>Image</name></member>
      <member refid="classnvblox_1_1Image_1a1cde2b3aa3ab942b9c6b2f581f5db4ae" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>Image</name></member>
      <member refid="classnvblox_1_1Image_1a1a7f93db4bad987ba4dfc231b6cb2e84" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>Image</name></member>
      <member refid="classnvblox_1_1Image_1a7cb596f9e0eae36c73e9f9c08f12dee3" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>Image</name></member>
      <member refid="classnvblox_1_1Image_1aad5373aacf2d3f39f9951942704d3557" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>Image</name></member>
      <member refid="classnvblox_1_1ImageBase_1a52fd3795cb941f3de812f10c7eaadb7b" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>ImageBase</name></member>
      <member refid="classnvblox_1_1ImageBase_1a63c5eb5434b0de06b4b6e7688e74f680" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>ImageBase</name></member>
      <member refid="classnvblox_1_1ImageBase_1aea81e82f1984f34eed7314805823e031" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>ImageBase</name></member>
      <member refid="classnvblox_1_1ImageBase_1a870f61cfb8a3a845a6d590d33a7c57b3" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>ImageBase</name></member>
      <member refid="classnvblox_1_1Image_1ab42d46cb8dd9f1475111f1ee8e32fb85" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>memory_type</name></member>
      <member refid="classnvblox_1_1Image_1a1df37582c3ebe26891ecb0a293f7d4e9" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>memory_type_</name></member>
      <member refid="classnvblox_1_1ImageBase_1ad854bf8480a21045488e98e85e5ed28d" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>numel</name></member>
      <member refid="classnvblox_1_1ImageBase_1aab8397c3df9d5735d5975a9ac9fb5804" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>operator()</name></member>
      <member refid="classnvblox_1_1ImageBase_1ad9dbdb0ea96b7105632ee6c526aa7440" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>operator()</name></member>
      <member refid="classnvblox_1_1ImageBase_1a36da952d6f8858e22bc9bcbcaf75aeb1" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>operator()</name></member>
      <member refid="classnvblox_1_1ImageBase_1ad4d1c7922f30076be956d53d3ca425cd" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>operator()</name></member>
      <member refid="classnvblox_1_1Image_1a7ac66302cc974845edca81b4b36528de" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1Image_1a50c1877f0d1fb7cf4f983aa517ffb4f1" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1ImageBase_1a99b33111882c220c7f336e0e28c45679" prot="protected" virt="non-virtual" ambiguityscope="nvblox::ImageBase::"><scope>nvblox::Image</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1ImageBase_1a75a04dd2f4c68ca26dd301dc1ed23b2f" prot="protected" virt="non-virtual" ambiguityscope="nvblox::ImageBase::"><scope>nvblox::Image</scope><name>operator=</name></member>
      <member refid="classnvblox_1_1Image_1a3e93a41a8e358094dcc13cd7639213b1" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>owned_data_</name></member>
      <member refid="classnvblox_1_1Image_1ad1c8c9ca974bbb73d01dfb5cfab326f4" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>populateFromBuffer</name></member>
      <member refid="classnvblox_1_1ImageBase_1a9d087c511c65b0ed94bc43306b7574ba" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>rows</name></member>
      <member refid="classnvblox_1_1ImageBase_1a79bb05e8dbcd406f25b4572a493a7cf7" prot="protected" virt="non-virtual"><scope>nvblox::Image</scope><name>rows_</name></member>
      <member refid="classnvblox_1_1Image_1a479f4eee0027e4954f9e9542d6b85301" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>setZero</name></member>
      <member refid="classnvblox_1_1ImageBase_1a11906bfe86bb4c4956ab93f501c7c73b" prot="public" virt="non-virtual"><scope>nvblox::Image</scope><name>width</name></member>
      <member refid="classnvblox_1_1Image_1ae32fd075b12733a66b4ac7b8107cee9d" prot="public" virt="virtual"><scope>nvblox::Image</scope><name>~Image</name></member>
      <member refid="classnvblox_1_1ImageBase_1a9394ed699e8b48977dbf425f8a94bb0b" prot="public" virt="virtual"><scope>nvblox::Image</scope><name>~ImageBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
